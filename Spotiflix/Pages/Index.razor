@inject HttpClient Http
@inject NavigationManager UriHelper
@page "/"

<div class="indexBody">
    <header>
        <form id="form" @onsubmit="ProcessSearch">
            <input type="text" id="search" class="search" placeholder="Search here" @bind="@Search">
            <RadzenButton Click=@(args => OnClick("Danger button")) Text="Navigate To Music Search" ButtonStyle="ButtonStyle.Danger" />
        </form>
    </header>
    
    <main id="main">
        @if (movies.Results != null)
        {
            @foreach (var data in movies.Results)
            {
                <div class="movie">
                    <img src='@ImagePath(data.poster_path)' alt="@data.title">
                    <div class="movie-info">
                        <h3>@data.title</h3>
                        <span class="@Rating(@data.vote_average)">@data.vote_average</span>
                    </div>
                    <div class="overview">
                        <h3>Overview</h3>
                        @data.overview
                    </div>
                </div>
            }
        }
    </main>

</div>

@code{
        const string IMG_PATH = "https://image.tmdb.org/t/p/w1280";

    private SiteDetails movies = new SiteDetails();
    private string Search = "";
    
    void OnClick(string buttonName)
    {
        UriHelper.NavigateTo("MusicIndex");
    }

    protected override async Task OnInitializedAsync()
    {
        Http.BaseAddress = new Uri("https://api.themoviedb.org");
        await GetAllMovies();
    }

    private string ImagePath(string? path)
    {
        return $"{IMG_PATH}{path}";
    }

    private string Rating(double vote)
    {
        string result = "red";

        if (vote >= 8)
        {
            result = "green";
        }
        else if (vote >= 5)
        {
            result = "orange";
        }
        return result;
    }

    //Ved godt det er ikke er smart med api keys her. Overvej anden mulighed.
    private async Task ProcessSearch()
    {
        if (!string.IsNullOrEmpty(Search))
        {
            movies = await Http.GetFromJsonAsync<SiteDetails>("3/search/movie?api_key=3fd2be6f0c70a2a598f084ddfb75487c&query=\"" + Search + "\"");
        }
        else
        {
            await GetAllMovies();
        }
    }

    private async Task GetAllMovies()
    {
        movies = await Http.GetFromJsonAsync<SiteDetails>("/3/discover/movie?sort_by=popularity.desc&api_key=3fd2be6f0c70a2a598f084ddfb75487c&page=1");
    }

}